# -*- coding: utf-8 -*-
def checkio_best(labyrinth):
    sX, sY = 1, 1
    eX, eY = 10, 10
    paths = [(sX, sY, '')]
    visited = [(sX, sY)]
    while len(paths):
        x, y, p = paths.pop(0)
        if x == eX and y == eY:
            return p
        for i, j, s in [(x + 1, y, 'S'), (x - 1, y, 'N'), (x, y + 1, 'E'), (x, y - 1, 'W')]:
            if labyrinth[i][j] != 1 and (i, j) not in visited:
                visited.append((i, j))
                paths.append((i, j, p + s))


def checkio(data):
    visited = [[0 for col in range(12)] for row in range(12)]

    def route(data, i, j, path):
        visited[i][j] = 1
        if i == 10 and j == 10:
            return path
            # East
        if data[i][j + 1] == 0 and visited[i][j + 1] == 0:
            result = route(data, i, j + 1, path + 'E')
            if result:
                return result
                # South
        if data[i + 1][j] == 0 and visited[i + 1][j] == 0:
            result = route(data, i + 1, j, path + 'S')
            if result:
                return result
                # West
        if data[i][j - 1] == 0 and visited[i][j - 1] == 0:
            result = route(data, i, j - 1, path + 'W')
            if result:
                return result
                # North
        if data[i - 1][j] == 0 and visited[i - 1][j] == 0:
            result = route(data, i - 1, j, path + 'N')
            if result:
                return result
        return ''

    path = route(data, 1, 1, '')
    return path


if __name__ == '__main__':
    print(checkio([
        [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
        [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],
        [1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1],
        [1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1],
        [1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1],
        [1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1],
        [1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1],
        [1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1],
        [1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1],
        [1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1],
        [1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1],
        [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]]))
    #print(checkio([
    #    [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
    #    [1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1],
    #    [1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1],
    #    [1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1],
    #    [1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1],
    #    [1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1],
    #    [1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1],
    #    [1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1],
    #    [1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1],
    #    [1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1],
    #    [1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1],
    #    [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
    #]))
    #
    #print(checkio([
    #    [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
    #    [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],
    #    [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],
    #    [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],
    #    [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],
    #    [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],
    #    [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],
    #    [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],
    #    [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],
    #    [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],
    #    [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],
    #    [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
    #]))
    #print(checkio([
    #    [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
    #    [1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1],
    #    [1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1],
    #    [1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1],
    #    [1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1],
    #    [1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1],
    #    [1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1],
    #    [1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1],
    #    [1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1],
    #    [1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1],
    #    [1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1],
    #    [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
    #]))
    #print(checkio([
    #    [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
    #    [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1],
    #    [1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1],
    #    [1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1],
    #    [1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1],
    #    [1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1],
    #    [1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1],
    #    [1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1],
    #    [1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1],
    #    [1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1],
    #    [1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1],
    #    [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
    #]))